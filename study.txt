
[필기장]

*강조강조강조★★★
- Java에서의 대입은 항상 변수에 들어 있는 값을 복사해서 전달한다.
   ex. ClassStart4.java 파일 코드에서 student1 객체는 하나 뿐이고 접근할 수 있는 주소값을 가진 변수가 2개(student1, students[0])인 것이다.


+입문 강의 필기 부분
+----------------------------------------------------------------------------------------------------------------------------------------------+
*기본
- java는 대소문자를 구분한다.
- main 메서드가 프로그램의 시작점이다.
- java는 한 문장이 끝날 때마다 세미콜론(;)을 입력해서 구분을 해주어야 한다.
- error를 확인하고 나면 꼭 error 부분을 주석처리 해야한다. 하지않으면, 다른 예제를 실행할 때도 해당 부분의 error가 발생할 수 있다. (모든 파일을 컴파일하기 때문)
- 형변환 = 캐스팅(Casting)


*단축입력
- psvm
 ┗ " public static void main(String[] args) {} " 자동으로 입력된다.

- sout
 ┗ " System.out.println(); " 자동으로 입력된다.

- iter
 ┗ 리스트에 대한 향상된 for문이 자동으로 입력된다.
    for (int number : numbers) {}


*단축키
- 코드 실행
 ┗ Ctrl + Shift + F10

- 커서 부분 선택
 ┗ Ctrl + W

- 중복 부분 선택 (VSCode에서의 Ctrl + D)
 ┗ Alt + J
- 중복 부분 전체 선택
 ┗ Shift + F6

- 한 줄 복사+붙여넣기 (Ctrl + C , Ctrl + V 보다 간편)
 ┗ Ctrl + D

- 한 줄 이동 (VSCode에서의 Alt + 방향키)
 ┗ Alt + Shift + 방향키

- 마우스 드래그한 것처럼 선택 영역 확장
 ┗ Ctrl + W / Ctrl + Shift + W

- 코드 완성 시키기 (세미콜론(;)이 없어도 자동으로 작성된다.)
 ┗ Ctrl + Shift + Enter

- 함수의 반환 값을 담을 변수 자동 입력
 ┗ Ctrl + Alt + V
   ex) getTotalAmount(orders) 입력 후 단축키 실행 ⇒ int totalAmount = getTotalAmount(orders);   //ref>ex>ProductOrderMain2.java 파일 참고

- 오류 빠른 수정
 ┗ Alt + Enter

- 선언된 부분 합치기
 ┗ Ctrl + Alt + N  →  커서가 위치해있는 하나만 합칠거면 Inline this ... 선택 / 모두 합칠거면 Inline all ... 선택
   ex) Cow cow = new Cow();    Animal[] animalArr = {new Dog(), new Cat(), cow};
           ⇓
       Animal[] animalArr = {new Dog(), new Cat(), new Cow()};

- 드래그한 부분을 함수로 선언하기
 ┗ Ctrl + Alt + M

- 필요한 파라미터 보기
 ┗ 파라미터를 넣는 () 괄호 안에 커서를 두고 Ctrl + P

- Generate
 ┗ Alt + Insert

- Override
 ┗ Ctrl + O

- GitHub Commit
 ┗ Ctrl + K
- GitHub Push
 ┗ Ctrl + Shift + K
 +----------------------------------------------------------------------------------------------------------------------------------------------+


*Class
- Class 내부 변수들 : 멤버변수(Member Variable)라고도 하고, 필드(Field)라고도 한다.

- 인스턴스, 객체 : 특정 Class로부터 생성된 객체를 의미한다.
   ex. Student student1 = new Student();    // 참조값(주소)을 반환해줘서 변수에 대입된다.
   ↳ 객체 vs 인스턴스
     : 인스턴스는 객체가 어떤 클래스에 속해 있는지 강조할 때 사용한다.
       "student1 객체는 Student 클래스의 인스턴스다."
       ⇒ 둘 다 Class에서 나온 실체라는 의미에서 비슷하게 사용되지만, 용어상 인스턴스는 관계에 초점을 맞춘 단어이다.


*기본형과 참조형
- 기본형은 독립적이다. (ref>VarChange1.java 참고)
- 참조형은 참조하는 값이 변경되면 같이 변경된다. (ref>VarChange2.java 참고)
⇒ 변수에 들어있는 값을 복사해서 사용한다는 점이 핵심이다.
  기본형은 변수에 숫자 값이 들어있기 때문에 독립적인거고, 참조형은 변수에 주소 값이 들어있기 때문에 같은 주소를 바라보게되어 같이 변경되는 것이다.


*Garbage Collection(가비지 컬렉션)
- 아무도 참조하지 않는 인스턴스의 최후
- NullMain1.java 파일에서 data에 참조값을 대입했다가 다시 null로 바꾸었다.
  더 이상 그 참조값은 참조되지 않아서 메모리 용량만 차지하게 된다.
- C언어와 같은 과거 프로그래밍 언어는 개발자가 직접 명령어를 사용해서 인스턴스를 메모리에서 제거해야 했다.
  실수로 인스턴스 제거를 누락하면 메모리에 사용하지 않는 객체가 가득해져서 메모리 오버플로우 오류가 발생하게 된다.
- Java는 자동으로 해준다.
  아무도 참조하지 않는 인스턴스가 있으면 JVM의 GC(가비지 컬렉션)가 더 이상 사용하지 않는 인스턴스라 판단하고 자동으로 메모리에서 제거해준다.


*NullPointerException
- 굉장히 자주 보게될 오류이다.
- 참조값 없이 객체를 찾아가면 나타나는 오류이다. (Null에 .(dot_객체접근)을 찍었을 때)


*절차지향프로그래밍
- 지금까지 했던게 다 절차지향이다. (class1 ~ ref 폴더)
- 실행 순서를 중요하게 생각하는 방식이다. 프로그램의 흐름을 순차적으로 따르며 처리하는 방식이다.
- 절차지향프로그래밍의 한계
  ⇒ oop1>MusicPlayerMain3.java 참고 / 객체 data가 변경되면 선언한 메서드 모두 수정이 필요하다.


*객체지향프로그래밍
- 실제 세계의 사물이나 사건을 객체로 보고, 객체들 간의 상호작용을 중심으로 프로그래밍하는 방식이다.
- oop1>MusicPlayer.java & MusicPlayerMain.java 참고 / MusicPlayer 객체를 사용하는 사람은 MusicPlayer의 코드를 몰라도 된다. 호출해서 사용하기만 하면 된다.
  ⇒ ex) 전자제품 사용할 때 어떻게 만들어졌는지 알 필요가 없다. 사용만 하면 된다.
- 캡슐화
  ⇒ 속성과 기능을 하나로 묶어서 필요한 기능을 메서드를 통해 외부에 제공하는 것
- 수정해야되는 부분은 객체 선언 부분(캡슐)만 수정하면 되고 호출해서 사용하는 부분에서는 수정할 게 없다. (절차지향프로그래밍 한계의 극복)


*this
- 객체의 "멤버변수"와 객체 내부 메서드의 "매개변수" 이름이 같으면 더 안쪽에 있는 매개변수가 우선순위이다.
- 멤버변수에 접근하려면 앞에 this. 을 붙여주면 된다. (construct>memberInit.java 참고)
  (멤버변수와 매개변수의 이름이 동일하지 않아도 멤버변수에 접근할 때에는 this. 를 붙여주는 코딩 스타일이 옛날에는 유행했었으나, 지금은 안하는 추세이기도 하고 IDE에서 색으로 구분을 해주기 때문에 권장하지 않는다.)
- 반복 문장 줄이기는 construct>MemberConstruct.java 참고


*생성자(Construct)
⇒ "생성자는 객체 생성 직후 객체를 초기화 하기 위한 특별한 메서드로 생각할 수 있다."
- 객체를 생성하고 바로 초기값을 할당해야 하는 경우가 많기 때문에 객체를 생성하자마자 즉시 필요한 기능을 수행할 수 있도록 "생성자"라는 기능을 제공한다. (construct>ConstructMain1.java 참고)
- 생성자의 이름은 클래스 이름과 같아야 한다.
- 생성자는 반환 타입이 없다. 비워두어야 한다.

*오버로딩(Overloading)
- (메서드 오버로딩처럼) 매개변수만 다르게 해서 여러 생성자를 제공할 수 있다.


*패키지(Package)
- 규칙 : 패키지의 이름과 위치는 폴터(디렉토리) 위치와 같아야 한다. (필수)
        패키지 이름은 모두 소문자를 사용한다. (관례)
        패키지 이름의 앞 부분에는 일반적으로 회사의 도메인 이름을 거꾸로 사용한다. ex. com.company.myapp (관례)
          ↳ 수 많은 외부 라이브러리가 함께 사용되면 같은 패키지에 같은 클래스 이름이 존재할 수도 있는데 이렇게 도메인 이름을 거꾸로 사용하면 해당 문제를 해결할 수 있다.


*접근제어자 종류
- private : 모든 외부 호출을 막는다.
- default(package-private) : 같은 패키지안에서 호출은 허용한다.
- protected : 같은 패키지안에서 호출은 허용한다. 패키지가 달라도 상속 관계의 호출은 허용한다.
- public : 모든 외부 호출을 허용한다.


*캡슐화
- 객체에는 속성(데이터)과 기능(메서드)이 있다.
- 캡슐화에서 가장 필수로 숨겨야 하는 것은 속성(데이터)이다.
- 객체의 데이터는 객체가 제공하는 기능은 메서드를 통해서 접근해야 한다.
- 객체의 기능 중에서 외부에서 사용하지 않고 내부에서만 사용하는 기능들은 모두 감추는 것이 좋다.
- 사용자 입장에서 꼭 필요한 기능만 외부에 노출하고 나머지 기능은 모두 내부로 숨기는 것이 좋다.
 ⇒ 정리 : 데이터는 모두 숨기고, 기능은 꼭 필요한 기능만 노출하는 것이 좋은 캡슐화이다.  (access>BankAccount.java 참고)


*자바 메모리 구조
- 메서드 영역 : 클래스 정보를 보관한다.
  ↳ 클래스 정보(실행 코드, 필드, 메서드, 생성자 코드 등)
  ↳ static 영역(static 변수)
  ↳ 런타임 상수 풀(공통으로 사용되는 상수인 리터럴)
- 스택 영역 : 실제 프로그램이 실행되는 영역이다. 메서드를 실행할 때마다 하나씩 쌓인다.
  ↳ 메서드를 호출할 때마다 하나의 스택 프레임이 쌓이고, 메서드가 종료되면 해당 스택 프레임이 제거된다.
  ↳ 각 쓰레드별로 하나의 실행 스택이 생성된다. 즉, 쓰레드 수 만큼 스택 영역이 생성된다. 지금은 쓰레드를 1개만 사용하므로 스택 영역도 하나이다.
- 힙 영역 : 객체(인스턴스)가 생성되는 영역이다. new 명령어를 사용하면 이 영역을 사용한다.
  ↳ 가비지 컬렉션(GC)이 이루어지는 주요 영역이다. 더 이상 참조되지 않는 객체는 GC에 의해 제거된다. (memory>JavaMemoryMain2 참고)


*자료 구조
- 스택 구조
  ↳ 후입선출(LIFO, Last In First Out)
    : 넣고 빼는 입출구가 동일하기 때문에 1 → 2 → 3 순서로 넣었다면, 3 → 2 → 1 순서로 뺄 수 있다.
- 큐 구조
  ↳ 선입선출(FIFO, First In First Out)
    : 입구, 출구가 따로 존재하기 때문에 1 → 2 → 3 순서로 넣으면, 1 → 2 → 3 순서로 뺼 수 있다.
 ⇒ 자료 구조는 각자 필요한 영역이 있다. 프로그램 실행과 메서드 호출에는 스택 구조가 적합하다. (memory>JavaMemoryMain1 참고 / 가장 먼저 호출한 main이 가장 늦게 종료된다.)


*static 변수
- static이 붙은 멤버 변수는 메서드 영역에서 관리한다. (인스턴스 영역(힙 영역)에 생성되지 않는다.)
- 클래스 변수는 하나만 존재한다.

*static 메서드
- static이 붙은 정적 메서드는 객체 생성 없이 클래스명 + .(dot) + 메서드명으로 호출할 수 있다. (static2>DecoMain1.java vs static2>DecoMain2.java 비교하여 참고)
- static 메서드는 static만 사용할 수 있다. (인스턴스 변수나 인스턴스 메서드를 사용할 수 없다.)  (static2>DecoData.java & static2>DecoDataMain.java 참고)
  ↳ 정적 메서드가 인스턴스의 기능을 사용할 수 없는 이유
    : 정적 메서드는 클래스의 이름을 통해 바로 호출할 수 있어서 인스턴스처럼 참조값의 개념이 없다. (즉, 특정 인스턴스의 기능을 사용하려면 참조값을 알아야 하는데 정적 메서드는 참조값 없이 호출한다.)
      (파라미터로 인스턴스(참조값)를 가져와서 호출하는 것은 가능하다.)
- (접근 제어자가 허락한다면) 모든 곳에서 static을 호출할 수 있다.
- main() 메서드는 정적 메서드이다. 그래서 main()이 호출하는 메서드에는 정적 메서드(static)를 사용했다.
- static 메서드를 제공할 때, 인스턴스 생성을 막아야 좋은 개발이다. (인스턴스를 생성해보고 안되는 것을 확인한 개발자는 .(dot)를 찍어보고 정적 메서드를 호출하여 사용하게 될 것이다. 제약, 유도)


*final
- final = "끝"
- final이 붙은 변수는 수정할 수 없다.
- class에서 final 변수를 선언만 했을 경우에는 생성자에서 초기화 가능, 선언과 초기화를 동시에 했을 경우에는 생성자에서 변경 불가능. (final1>ConstructInit.java & FieldInit.java & FinalFieldMain.java 파일 참고)
- 참조 대상의 객체 값은 변경할 수 있다. 참조형 변수에 final이 붙으면 참조 대상 자체를 다른 대상으로 변경하지 못하는 것이고 참조하는 대상의 값은 변경할 수 있다. (final1>FinalRefMain.java 참고)

*static final (상수 키워드)
- final 키워드를 사용하면 초기화 값이 변하지 않는다.
- static 영역은 단 하나만 존재하는 여역이다.
- 필드 초기화(FieldInit.java)를 사용하는 경우, final 과 static을 붙여서 사용하면 JVM 상에서 하나만 존재하므로 메모리 낭비와 중복 문제를 해결할 수 있다.

*상수(Constant)
- static final 키워드를 사용한다.
- 대문자를 사용하고 구분은 _(언더스코어)를 사용한다.
- 필드를 직접 접근해서 사용한다.


*상속
- extends 키워드 사용    (extends1>ex2>*.java 참고)
- 부모클래스(슈퍼클래스) / 자식클래스(서브클래스)
- 다중 상속을 지원하지 않는다. extends 대상은 하나만 선택할 수 있다. 부모가 또 부모를 가지는 것은 괜찮다.

*상속과 메모리 구조
- 상속 관계가 있는 클래스의 인스턴스를 생성하면 부모클래스도 함께 포함해서 하나의 객체로 생성된다. (참조값은 하나지만, 그 안에는 두개 클래스(부모/자식)의 정보가 공존하는 것)
- 하나인 참조값으로 호출했을 때 어떤 클래스를 선택할지에 대한 기준은 ⇒ 호출하는 변수의 타입(클래스)을 기준으로 한다. (ex2>CarMain.java 보면 자식클래스의 인스턴스를 new로 만드는데 여기서는 자식 클래스가 기준이 되는 것이다. Car car = new Car(); 라면 Car(부모클래스)가 기준이 된다.)

*상속과 메서드 오버라이딩
- 애노테이션(@Override)를 입력하여 부모 클래스의 메서드를 재정의하는 것이다.
- 애노테이션은 필수는 아니지만 필수로 적는게 좋다. (실수로 재정의하는 메서드의 이름에 오타가 났다면 컴파일 오류를 발생해준다.)

*메서드 오버로딩(Overloading)
- 메서드 이름이 같고 매개변수만 다르게 해서 여러 생성자를 제공할 수 있다.
*메서드 오버라이딩(Overriding)
- 중요한 것은, 오버라이딩 된 메서드가 항상 우선권을 가진다는 점이다.
- 하위 클래스에서 상위 클래스의 메서드를 재정의하는 과정을 의미한다. 따라서 상속 관계에서 사용한다.
- 자식의 새로운 기능이 부모의 기존 기능을 새로운 기능으로 덮어버린다.
    ↳ 메서드 오버라이딩 조건
      ·메서드 이름: 메서드 이름이 같아야 한다.
      ·메서드 매개변수(파라미터): 매개변수(파라미터) 타입, 순서, 개수가 같아야 한다.
      ·반환 타입: 반환 타입이 같아야 한다. 단, 반환 타입이 하위 클래스 타입일 수 있다.
      ·접근 제어자: 오버라이딩 메서드의 접근 제어자는 상위 클래스의 메서드보다 더 제한적이어서는 안된다. (ex. 상위 클래스의 메서드가 protected로 선언되어 있으면 public/protected로 재정의 가능하지만, private/default로는 불가능하다.)
      ·예외: 오버라이딩 메서드는 상위 클래스의 메서드보다 더 많은 체크 예외를 throw로 선언할 수 없다. 하지만 더 적거나 같은 수의 예외, 또는 하위 타입의 예외는 선언할 수 있다.
      ·static, final, private: 키워드가 붙은 메서드는 오버라이딩 될 수 없다.
        ( static은 오버라이딩이 필요없다. 클래스 이름을 통해 필요한 곳에 직접 접근하면 된다.
          final은 변경 불가능하기 때문에 재정의도 금지한다.
          private는 해당 클래스에서만 접근 가능하기 때문에 하위 클래스에서 접근할 수 없다. 따라서 오버라이딩 할 수 없다. )
      ·생성자 오버라이딩: 생성자는 오버라이딩 할 수 없다.
    ⇒ 애노테이션(@Override)를 쓴다면 조건에 안 맞는 오버라이드는 컴파일 오류를 내줄 것이다.


*애노테이션
- "@"이 붙은 프로그램이 읽을 수 있는 특별한 주석이다.


*UML 표기법 (일부)
+ : public      모든 외부 호출을 허용한다.
- : private     모든 외부 호출을 막는다.
~ : default     같은 패키지안에서 호출은 허용한다.
# : protected   같은 패키지안에서 호출은 허용한다. 패키지가 달라도 상속 관계의 호출은 허용한다.


*super
- 부모와 자식의 필드명이 같거나 메서드가 오버라이딩 되어 있으면, 자식에서 부모의 필드나 메서드를 호출할 수 없다. 이때 super 키워드를 사용하면 부모를 참조할 수 있다. (extends1>super1>* 참고)

*상속과 super
- 상속 관계의 인스턴스를 생성하면 메모리 내부에는 자식과 부모 클래스가 각각 만들어진다. 따라서 각각의 생성자도 모두 호출되어야 한다.
- 상속 관계를 사용하면 자식 클래스의 생성자에서 부모 클래스의 생성자를 반드시 호출해야 한다. (규칙)      (extends1>super2>* 참고)
- 부모의 생성자가 매개변수가 없는 기본 생성자일 경우 자식 클래스에서 부모 클래스의 생성자를 호출하지 않아도 java가 자동으로 호출해준다.


*다형성 (Polymorphism)
- 다양한 형태, 여러 형태
- 한 객체가 여러 타입의 객체로 취급될 수 있는 능력 (보통 하나의 객체는 하나의 타입으로 고정되어 있다.)

*다형적 참조 (poly>basic>PolyMain.java 참고)
   ↳ ·부모 타입은 자식 타입을 담을 수 있다. (손자도 가능/자식 타입은 부모 타입을 담을 수 없다.)
     ·다형적 참조 상태에서 자식의 기능은 호출할 수 없다.
      : 호출하는 변수의 타입을 기준으로 클래스를 찾기 때문에 부모 클래스를 찾게되고 자식 클래스는 찾을 수 없다. ("*상속과 메모리 구조"에서의 "하나인 참조값으로 호출했을 때 어떤 클래스를 선택할지에 대한 기준은 ⇒ 호출하는 변수의 타입(클래스)을 기준으로 한다." 부분 참고)

*캐스팅 : (타입) 처럼 괄호 안에 자식 타입을 지정하면 참조 대상을 특정 타입으로 변경할 수 있다. 특정 타입으로 변경하는 것
- 다운캐스팅 : 자식 타입으로 변경 (poly>basic>CastingMain1.java 참고)
   ↳ ·자식 타입은 부모 타입을 담을 수 없어서 JAVA는 컴파일 오류를 발생시킨다.
     ·강제적으로 가능하게 하는 방법이 다운캐스팅이다. "(타입)" 괄호 안에 자식 타입을 적어주면 된다.
     ·캐스팅을 한다고 해서 타입이 변하는 것은 아니다.
      : poly>basic>CastingMain1.java 파일로 예를 들자면, 부모 타입인 poly가 자식 타입으로 다운캐스팅되어 child 변수에 대입됐지만, poly 변수에는 여전히 부모 타입 참조값이 들어있다.
- 업캐스팅 : 부모 타입으로 변경
- 다운캐스팅을 자동으로 하지 않는 이유는 poly>basic>CastingMain4.java 참고
  런타임 오류 발생
  ( ·컴파일 오류: 자바 프로그램을 실행하기 전에 발생하는 오류이다. IDE에서 즉시 확인할 수 있기 때문에 안전한 오류이다.
    ·런타임 오류: 프로그램이 실행되고 있는 시점에 발생하는 오류이다. 사용자가 프로그램을 사용하는 도중에 발생하는 오류이기 때문에 매우 안좋은 오류이다. )
- instanceof (poly>basic>CastingMain5.java 참고)
   ↳ (변수) instanceof (클래스) : (변수)가 (클래스)의 인스턴스인지 아닌지 확인 (boolean 값 반환)
     instanceof를 통해 인스턴스인지 확인하고 다운캐스팅을 하면 런타임 오류 위험성이 없어진다.

*캐스팅 종류
- 일시적 다운 캐스팅 (poly>basic>CastingMain2 참고)
  : 다운캐스팅 결과를 변수에 대입하는 과정이 번거롭기 때문에 변수에 대입하는 과정 없이 일시적으로 다운캐스팅 해서 하위 클래스의 기능을 바로 호출할 수 있다.

*다형성과 메서드 오버라이딩 (poly>overriding>*.java 참고)
- 다형적 참조인 관계에서 변수 오버라이딩은 안되고, 메서드 오버라이딩은 된다.
- 오버라이딩 된 메서드는 항상 우선권을 갖기때문에 오버라이딩 된 메서드가 호출된다.


*추상 클래스
- 클래스를 선언할 때 앞에 abstract(추상) 키워드를 붙인다.
- 기존 클래스와 완전히 같지만, new OOO와 같이 인스턴스를 직접 생성하지 못하게 제약이 추가된 것이다.
- 클래스의 모든 메서드가 추상 메서드이면, 순수 추상 클래스라고 한다.

*추상 메서드
- 메서드를 선언할 때 앞에 abstract(추상) 키워드를 붙인다.
- 상속 관계에 있는 자식 클래스가 반드시 오버라이딩 해야 하는 메서드를 부모 클래스에 정의하는 것이다.
- 추상 메서드는 추상적인 개념을 제공하는 메서드이기 때문에 실체가 존재하지 않는다. (=메서드 body(내용)가 없다.)
- 기존 메서드와 완전히 같지만, 메서드 body(내용)가 없고 자식 클래스가 해당 메서드를 반드시 오버라이딩 해야 한다는 제약이 추가된 것이다.
- 추상 메서드가 있는 클래스도 추상 클래스여야 한다.

  ⇒ poly>ex2 에서의 문제점 2가지(Animal 클래스의 인스턴스를 new로 생성할 수 있다. 자식 클래스에서 sound 메서드를 오버라이딩 하지 않을 수 있다.)를
    poly>ex3 에서 추상 클래스와 추상 메서드를 사용해 제거하였다.


*인터페이스 (poly>ex5>* 참고)
- class가 아니라 interface 키워드를 사용
- 특징
   ·인스턴스를 생성할 수 없다.
   ·상속시 모든 메서드를 오버라이딩 해야 한다.
   ·주로 다형성을 위해 사용한다.
- 순수 추상 클래스와 같다. 편의 기능이 추가된 것이다.
   ·인터페이스의 메서드는 전부 public abstract 이다. 생략 가능, 생략 권장
   ·(상속은 지원하지 않지만, 인터페이스는) 다중 구현(다중 상속)을 지원한다. (인터페이스는 다 구현해야 되기 때문에 상속말고 구현이라고 한다.)
- 개발자는 인터페이스를 보면 "아 여기 있는 걸 내가 다 구현해야 하는구나."라고 생각한다.
- 인터페이스에서 멤버 변수는 public static final이 모두 포함되었다고 간주된다. (생략된 것)
   ↳ 정적이면서 변할 수 없는 변수를 상수라고 하고, 관례상 상수는 대문자에 언더스코어(_)로 구분한다.
- 구현 관계를 정의할 때는, extends(상속)이 아닌 implements(구현) 키워드를 입력한다.
- 클래스 상속 관계는 UML에서 실선을 사용하지만, 인터페이스 구현 관계는 UML에서 점선을 사용한다.
- 인터페이스를 사용해야 하는 이유
   ↳ 인터페이스를 구현하는 곳에서 인터페이스의 메서드를 반드시 구현하라는 규약(제약)을 주는 것이다.
     좋은 프로그램은 제약이 있는 프로그램이다.


*객체 지향 프로그래밍
- 추상화, 캡슐화, 상속, 다형성 (다형성이 가장 중요)
- 객체 지향 프로그래밍은 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 "객체"들의 모임으로 파악하고자 하는 것이다.
  각각의 객체는 메시지(메서드)를 주고받고, 데이터를 처리할 수 있다. (협력)
- 객체 지향 프로그래밍은 프로그램을 유연하고 변경이 용이하게 만들기 때문에 대규모 소프트웨어 개발에 많이 사용된다.
   ↳ 유연하고 변경에 용이 = 레고 블럭 조립하듯이 / 키보드, 마우스 갈아 끼우듯이 / 컴퓨터 부품 갈아 끼우듯이 / 컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법
- 역할과 구현을 분리
   ↳ 역할과 구현으로 구분하면 세상이 단순해지고, 유연해지며 변경도 편리해진다.
     장점 (ex. 클라이언트=자동차를 사용하는 운전자)
      ·클라이언트는 대상의 역할(인터페이스)만 알면 된다.
      ·클라이언트는 구현 대상의 내부 구조를 몰라도 된다.
      ·클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않는다.
      ·클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다.
     자바 언어로 보면
      ·자바 언어의 다형성을 활용 (역할 = 인터페이스 / 구현 = 인터페이스를 구현한 클래스, 구현 객체)
      ·객체를 설계할 때 역할과 구현을 명확히 분리
      ·객체 설계 시 역할(인터페이스)을 먼저 부여하고, 그 역할을 수행하는 구현 객체 만들기
- 객체의 협력이라는 관계부터 생각
   ·혼자 있는 객체는 없다.
   ·클라이언트: 요청 / 서버: 응답
   ·수 많은 객체 클라이언트와 객체 서버는 서로 협력 관계를 가진다.
- 자바 언어의 다형성
   ·오버라이딩을 떠올려보자
   ·오버라이딩은 자바 기본 문법
   ·오버라이딩 된 메서드가 실행
   ·다형성으로 인터페이스를 구현한 객체를 실행 시점에 유연하게 변경할 수 있다.
   ·물론 클래스 상속 관계도 다형성, 오버라이딩 적용가능
- 역할과 구현을 분리 > 정리
   ·실세계의 역할과 구현이라는 편리한 컨셉을 다형성을 통해 객체 세상으로 가져올 수 있음
   ·유연하고, 변경이 용이
   ·확장 가능한 설계 (ex. Car 인터페이스를 구현한 자동차 클래스들을 많이 생성할 수 있다.)
   ·클라이언트에 영향을 주지 않는 변경 가능
   ·인터페이스를 안정적으로 잘 설계하는 것이 중요 ↓↓↓
- 역할과 구현을 분리 > 한계
   ·역할(인터페이스) 자체가 변하면 클라이언트, 서버 모두에 큰 변경이 발생한다.
   ·인터페이스를 안정적으로 잘 설계하는 것이 중요 ↑↑↑
- 최종 정리
   ·다형성이 가장 중요하다.
   ·디자인 패턴 대부분은 다형성을 활용하는 것이다.
   ·스프링의 핵심인 제어의 역전(IoC), 의존관계 주입(DI)도 결국 다형성을 활용하는 것이다.
   ·다형성을 잘 활용하면 구현을 편리하게 변경할 수 있다.
