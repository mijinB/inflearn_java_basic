
[필기장]

*강조강조강조★★★
- Java에서의 대입은 항상 변수에 들어 있는 값을 복사해서 전달한다.
   ex. ClassStart4.java 파일 코드에서 student1 객체는 하나 뿐이고 접근할 수 있는 주소값을 가진 변수가 2개(student1, students[0])인 것이다.


+입문 강의 필기 부분
+----------------------------------------------------------------------------------------------------------------------------------------------+
*기본
- java는 대소문자를 구분한다.
- main 메서드가 프로그램의 시작점이다.
- java는 한 문장이 끝날 때마다 세미콜론(;)을 입력해서 구분을 해주어야 한다.
- error를 확인하고 나면 꼭 error 부분을 주석처리 해야한다. 하지않으면, 다른 예제를 실행할 때도 해당 부분의 error가 발생할 수 있다. (모든 파일을 컴파일하기 때문)
- 형변환 = 캐스팅(Casting)


*단축입력
- psvm
 ┗ " public static void main(String[] args) {} " 자동으로 입력된다.

- sout
 ┗ " System.out.println(); " 자동으로 입력된다.

- iter
 ┗ 리스트에 대한 향상된 for문이 자동으로 입력된다.
    for (int number : numbers) {}


*단축키
- 코드 실행
 ┗ Ctrl + Shift + F10

- 중복 부분 선택 (VSCode에서의 Ctrl + D)
 ┗ Alt + J
- 중복 부분 전체 선택
 ┗ Shift + F6

- 한 줄 복사+붙여넣기 (Ctrl + C , Ctrl + V 보다 간편)
 ┗ Ctrl + D

- 한 줄 이동 (VSCode에서의 Alt + 방향키)
 ┗ Alt + Shift + 방향키

- 마우스 드래그한 것처럼 선택 영역 확장
 ┗ Ctrl + W / Ctrl + Shift + W

- 코드 완성 시키기 (세미콜론(;)이 없어도 자동으로 작성된다.)
 ┗ Ctrl + Shift + Enter

- GitHub Commit
 ┗ Ctrl + K
- GitHub Push
 ┗ Ctrl + Shift + K
 +----------------------------------------------------------------------------------------------------------------------------------------------+


*Class
- Class 내부 변수들 : 멤버변수(Member Variable)라고도 하고, 필드(Field)라고도 한다.

- 인스턴스, 객체 : 특정 Class로부터 생성된 객체를 의미한다.
   ex. Student student1 = new Student();    // 참조값(주소)을 반환해줘서 변수에 대입된다.
   ↳ 객체 vs 인스턴스
     : 인스턴스는 객체가 어떤 클래스에 속해 있는지 강조할 때 사용한다.
       "student1 객체는 Student 클래스의 인스턴스다."
       ⇒ 둘 다 Class에서 나온 실체라는 의미에서 비슷하게 사용되지만, 용어상 인스턴스는 관계에 초점을 맞춘 단어이다.


*기본형과 참조형
- 기본형은 독립적이다. (VarChange1.java 참고)
- 참조형은 참조하는 값이 변경되면 같이 변경된다. (VarChange2.java 참고)
⇒ 변수에 들어있는 값을 복사해서 사용한다는 점이 핵심이다.
  기본형은 변수에 숫자 값이 들어있기 때문에 독립적인거고, 참조형은 변수에 주소 값이 들어있기 때문에 같은 주소를 바라보게되어 같이 변경되는 것이다.


*Garbage Collection(가비지 컬렉션)
- 아무도 참조하지 않는 인스턴스의 최후
- NullMain1.java 파일에서 data에 참조 값을 대입했다가 다시 null로 바꾸었다.
  더 이상 그 참조 값은 참조되지 않아서 메모리 용량만 차지하게 된다.
- C언어와 같은 과거 프로그래밍 언어는 개발자가 직접 명령어를 사용해서 인스턴스를 메모리에서 제거해야 했다.
  실수로 인스턴스 제거를 누락하면 메모리에 사용하지 않는 객체가 가득해져서 메모리 오버플로우 오류가 발생하게 된다.
- Java는 자동으로 해준다.
  아무도 참조하지 않는 인스턴스가 있으면 JVM의 GC(가비지 컬렉션)가 더 이상 사용하지 않는 인스턴스라 판단하고 자동으로 메모리에서 제거해준다.